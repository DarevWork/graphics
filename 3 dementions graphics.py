
import numpy as np
from matplotlib import cm
import matplotlib.pyplot as plt

# В трехмерном пространстве каждая точка задается тремя координатами,
# следовательно, в трехмерном пространстве нужно два аргумента для задания функции.
# Зададим функцию от двух аргументов f(x,y) = x^2 - y^2

f = lambda x, y: x ** 2 - y ** 2

# Чтобы начать рисовать трехмерные поверхности в Python нужно сначал задать область
# построения с помощью функции  plt.figure принимает параметр figsize(x, y), где
# x и y – ширина и высота рисунка в дюймах. Создадим рисунок в Python размером 12×6
# дюймов для отображения графиков.

fig = plt.figure(figsize=(12, 6))

# В построенной области мы создадим рисунок, в котором будут отображено трёхмерное
# пространство с координатными осями и сама поверхность. В Питоне для этого используется fig.add_subplot().

ax = fig.add_subplot(1, 1, 1, projection='3d')

# Функция в Python fig.add_subplot() разбивает область построения на клетки и задает
# в какой клетке рисовать трехмерный график. Так команда ax = fig.add_subplot(1, 1, 1, projection = '3d')
# разбивает область построения на две клетки и в первую клетку будет отображаться трехмерный гарфик,
# благодаря аргументу projection = ‘3d’

# Введём области отображения функции для каждого аргумента в Питон.

# размечаем границы осей для аргументов

xval = np.linspace(-4, 4, 100)
yval = np.linspace(-4, 4, 100)

# создаём массив с xval столбцами и yval строками
# - в этом массиве будут храниться значения z
x, y = np.meshgrid(xval, yval)

# приравниваем z к функции от x и y
z = f(x, y)

# Нужно создать поверхность, которая будет отображаться на рисунке в Python. Для этого используется

surf = ax.plot_surface(x, y, z, rstride=5, cstride=5, cmap=cm.viridis)

plt.show()
